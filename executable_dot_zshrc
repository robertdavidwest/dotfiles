# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
if [ -f "$HOME/.home-env" ]; then
  source "$HOME/.home-env"
fi

alias vim=nvim

alias gs='git status'
alias push='git push'
alias pull='git pull'
alias fetch='git fetch'

fpath+=/opt/homebrew/share/zsh/site-functions
autoload -Uz compinit && compinit

# Created by `pipx` on 2024-01-12 18:58:35
export PATH="$PATH:/Users/robert/.local/bin"

alias psql_local='psql -h localhost -p 5434'

alias login="aws-azure-login --enable-chrome-seamless-sso"
alias loginP="aws-azure-login --enable-chrome-seamless-sso --profile prod"
alias login_staging="aws-azure-login --enable-chrome-seamless-sso --profile staging"
alias login_stage="aws-azure-login --enable-chrome-seamless-sso --profile stage"
alias login_stage_rw="aws-azure-login --enable-chrome-seamless-sso --profile stage_rw"
alias login_prod_elevated="aws-azure-login --enable-chrome-seamless-sso --profile prod_elevated"

eval "$(zoxide init --cmd cd zsh)"

export DBT_PROFILES_DIR=~/.dbt/

export PATH_TO_DBT="/Users/robert/github/dbt/venv/bin/dbt"

SNOWFLAKE_ACCOUNT=pra18133.us-east-1
SNOWFLAKE_USER=robert.west@talkiatry.com
alias snow="snowsql -a ${SNOWFLAKE_ACCOUNT} -u ${SNOWFLAKE_USER} --authenticator externalbrowser"

export SNOWFLAKE_SSO_USER="robert.west@talkiatry.com"

alias py=/Users/robert/general_venv/bin/python


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


copy_branch() {
  if [[ -z $1 ]]; then
    echo "Usage: copy_branch <search-pattern>"
    return 1
  fi

  # Find branches matching the pattern, strip any leading '* ' or spaces, take the first
  local branch
  branch=$(git branch --list "*$1*" \
           | sed 's/^[ *]*//' \
           | head -n1)

  if [[ -z $branch ]]; then
    echo "⚠️  No branch matching ‘$1’ found."
    return 1
  fi

  # Copy to clipboard and confirm
  echo -n "$branch" | pbcopy
  echo "✅  Copied branch ‘$branch’ to clipboard."
}


export DOCKER_DEFAULT_PLATFORM=linux/amd64

# Git commit helper function with automatic PADA ticket prefixing
commit() {
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        echo "Error: Not in a git repository"
        return 1
    fi
    
    if [ $# -eq 0 ]; then
        echo "Usage: commit <commit message>"
        return 1
    fi
    
    local commit_message="$*"
    local branch_name=$(git branch --show-current)
    
    if [[ $branch_name =~ ^PADA-[0-9]+.* ]]; then
        local ticket_number=$(echo "$branch_name" | grep -o '^PADA-[0-9]\+')
        commit_message="[$ticket_number] $commit_message"
    fi
    
    git commit -m "$commit_message"
}
